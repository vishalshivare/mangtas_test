Microservices written in Go was a key component of a new system that would enable The Economist to deliver scalable, high performing services and quickly iterate new products. Go's baked in concurrency and API support along with its design as a static, compiled language enabled a distributed eventing system. Overall, The Economist team's experience with Go has been a positive experience.
AppsFlyer processes nearly 70+ billion HTTP requests a day, and is built using a microservices architecture style. The entry point to the system that wraps all of the frontend services is a mission-critical (non-micro) service called the API Gateway. This article is an experience reporting of migrating from a Clojure-based gateway to a newly designed Go-based implementation.
The Go Programming Language book, by Donovan and Kernighan, presents the key points of Go in an easy-to-digest book, along with useful tips and techniques. From a quick introduction to the syntax through concurrent programs with mutexes and goroutines, the book takes the reader on a beautiful voyage through Go’s fundamentals. Read on for InfoQ’s review.
gRPC is a relatively new implementation of the Remote Procedure Call (RPC) API paradigm. It can play a major role in all synchronous communications between internal microservices. Here we examine key gRPC concepts, their usage, and benefits of having gRPC as an inter-service communication by using a real-world microservice use case.